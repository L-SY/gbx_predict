cmake_minimum_required(VERSION 3.8)
project(actuator_interface)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# Find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(rclcpp_lifecycle REQUIRED)
find_package(hardware_interface REQUIRED)
find_package(controller_manager REQUIRED)
find_package(ros2_control REQUIRED)
find_package(pluginlib REQUIRED)
find_package(urdf REQUIRED)
find_package(std_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(yaml-cpp REQUIRED)

# Include directories
include_directories(
  include
  ${yaml-cpp_INCLUDE_DIRS}
)

# Create the actuator interface library
add_library(${PROJECT_NAME}_hw
  src/can_manager/can_interface/can_bus.cpp
  src/can_manager/can_interface/socketcan.cpp
  src/can_manager/can_devices/rm_actuator.cpp
  src/can_manager/can_manager.cpp
  src/common/lp_filter.cpp
  src/actuator_interface.cpp
  src/ros2_control_hw.cpp
)

target_link_libraries(${PROJECT_NAME}_hw
  yaml-cpp
)

ament_target_dependencies(${PROJECT_NAME}_hw
  rclcpp
  rclcpp_lifecycle
  hardware_interface
  controller_manager
  ros2_control
  pluginlib
  urdf
  std_msgs
  sensor_msgs
  geometry_msgs
)

# Export the actuator interface plugin
pluginlib_export_plugin_description_file(hardware_interface actuator_interface_hw.xml)

# Install headers
install(
  DIRECTORY include/
  DESTINATION include
)

# Install libraries
install(
  TARGETS ${PROJECT_NAME}_hw
  EXPORT export_${PROJECT_NAME}
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
)

# Install config files
install(
  DIRECTORY config/
  DESTINATION share/${PROJECT_NAME}/config
)

# Install launch files
install(
  DIRECTORY launch/
  DESTINATION share/${PROJECT_NAME}/launch
)

# Install URDF files
install(
  DIRECTORY urdf/
  DESTINATION share/${PROJECT_NAME}/urdf
)

# Install test files
install(
  DIRECTORY test/
  DESTINATION share/${PROJECT_NAME}/test
  USE_SOURCE_PERMISSIONS
)

# Export dependencies
ament_export_targets(export_${PROJECT_NAME} HAS_LIBRARY_TARGET)
ament_export_dependencies(
  rclcpp
  rclcpp_lifecycle
  hardware_interface
  controller_manager
  ros2_control
  pluginlib
  urdf
  std_msgs
  sensor_msgs
  geometry_msgs
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
